#! /usr/bin/env python3
"""
Script to connect eqquasi and sord.
"""
import xarray as xr
import matplotlib.pyplot as plt
import numpy as np
import scipy.interpolate as sci
import os
from user_defined_params import *
from netCDF4 import Dataset
from trilinear_interpolation import *

def connect(src, dst, src_dx, dst_dx):
# The function converts displacement fields from the source (src) mesh to the destination (dst) mesh.
# src_dx and dst_dx are spatial resolutions of the src and dst meshes, respectively. 
    disp_in = xr.open_dataset(str("disp.02421.nc"))
    coor_in = xr.open_dataset(str(src) + ".coor.nc")

    coor = coor_in.coordinates
    disp = disp_in.disp
  
  # the block on the y_minus side of fault
    numnp = len(coor)
    nx = int((xmax - xmin)/dx + 1)
    nz = int((zmax - zmin)/dx + 1)
    ny = int(numnp/(nx*nz))
    ny2 = int(ny/2)
    print(numnp,nx,ny,nz)
    x0 = np.zeros((nx))
    y0 = np.zeros((ny2))
    z0 = np.zeros((nz))
    
    for ix in range(nx):
        x0[ix] = coor[nz*ny*ix,0]
    for iy in range(ny2):
        y0[iy] = coor[iy,1]
    for iz in range(nz):
        z0[iz] = coor[ny*iz,2]
    print(x0)
    print(y0)
    print(z0)
    disp0 = np.zeros((nx,ny2,nz))
    for ix in range(nx):
        for iy in range(ny2):
            for iz in range(nz):
                disp0[ix,iy,iz] = coor[ix*(ny*nz)+iz*ny+iy,0]
    ymax_new = 5.0e3
    nx1 = int((xmax_trans - xmin_trans)/dx_trans + 1)
    nz1 = int((zmax - zmin_trans)/dx_trans + 1)
    ny1 = int((-ymin_trans)/dx_trans + 1)
    x = np.linspace(xmin_trans, xmax_trans, int(nx1))
    y = np.linspace(ymin_trans, 0, int(ny1))
    z = np.linspace(zmin_trans, zmax, int(nz1))
    print('total new grids are ' + str(nx1*ny1*nz1/1000000) + ' millions ...')
    #jitted_trilint = trilinear_interpolation(x0, y0, z0, disp0[:,:,:,0], x, y, z)
    disp_new = []
    #for xcoor in enumerate(x):
    #    for ycoor in enumerate(y): 
    #        for zcoor in enumerate(z):
    #            
    #            for idim in range(1,3):
     #               a= 1
    # The following process is too slow. Need to leverage the advantage of structured grids.
    ntag = 0
    for ix, xcoor in enumerate(x):
        for iy, ycoor in enumerate(y): 
            for iz, zcoor in enumerate(z):
                disp_new.append(trilinear_interpolation(x0,y0,z0,disp0, xcoor, ycoor, zcoor))
                ntag = ntag + 1
                if ntag % 1000000 == 1:
                  print(str(int(ntag/nx1/ny1/nz1*100)) + ' % in progress')
    nc = Dataset("SORD_disp_init.nc", "w", format="NETCDF4_CLASSIC", diskless=True)
    nc.Conventions = 'CF-1.7'
    nc.title = 'Forecast model run'
    nc.institution = 'Unidata'
    nc.source = 'WRF-1.5'
    nc.history = str(datetime.utcnow()) + ' Python'
    nc.references = ''
    nc.comment = ''
    nc.createDimension('x', x.size)
    nc.createDimension('y', y.size)
    nc.createDimension('z', z.size)
    disp_var = nc.createVariable('dispx', datatype=np.float32, dimensions=())

def _main_func(description):
    src = str("mesh")
    dst = str("sord")
    
    connect(src, dst, dx, 50)

if __name__ == "__main__":
    _main_func(__doc__)
